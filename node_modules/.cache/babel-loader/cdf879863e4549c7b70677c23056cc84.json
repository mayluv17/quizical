{"ast":null,"code":"import _toConsumableArray from\"/Users/mac/Documents/Dev/React Class/quizical/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"/Users/mac/Documents/Dev/React Class/quizical/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/mac/Documents/Dev/React Class/quizical/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import\"./App.css\";import Quiz from\"./components/Quiz\";import React from\"react\";import{nanoid}from\"nanoid\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),quizObj=_React$useState2[0],setQuizObj=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),gameCompleted=_React$useState4[0],setgameCompleted=_React$useState4[1];var _React$useState5=React.useState(0),_React$useState6=_slicedToArray(_React$useState5,2),score=_React$useState6[0],setScore=_React$useState6[1];//created a function to restructor the answer object\nfunction extendAnswerObj(answer,isCorrect){return{id:nanoid(),text:answer,selected:false,isCorrect:isCorrect};}//restructurd data. merge both correct and incorrect answers\nfunction dataRestructor(data){var questionsObj=data.map(function(result){var cans=extendAnswerObj(result.correct_answer,true);var ians=result.incorrect_answers.map(function(prevObj){return extendAnswerObj(prevObj,false);});return _objectSpread(_objectSpread({},result),{},{qid:nanoid(),correct_answer:cans,incorrect_answers:ians,//combined and randomise both corect and incorrect answers\nanswers:[cans].concat(_toConsumableArray(ians)).sort(function(){return 0.5-Math.random();})});});return questionsObj;}//check if game is not on first before getting new data from API\nReact.useEffect(function(){!gameCompleted&&fetch(\"https://opentdb.com/api.php?amount=3&category=18&difficulty=easy\").then(function(res){return res.json();}).then(function(data){return setQuizObj(dataRestructor(data.results));});},[]);//update the setQuizObj state when an answer is selected\nfunction answerSelector(questionid,answerid){setQuizObj(function(prevData){return prevData.map(function(eachQuestion){if(eachQuestion.qid===questionid){//check the question answered\nreturn _objectSpread(_objectSpread({},eachQuestion),{},{answers:eachQuestion.answers.map(function(answer){//match update the seleted answer status\nreturn answer.id===answerid?_objectSpread(_objectSpread({},answer),{},{selected:true})://return other answer and set their staus to not selected\n_objectSpread(_objectSpread({},answer),{},{selected:false});})});}else{return _objectSpread({},eachQuestion);}});});}//map through quiz state and returned redered quiz component\nvar allQuize=quizObj.map(function(item){return/*#__PURE__*/_jsx(Quiz,{id:item.qid,question:item.question,correct_answer:item.correct_answer.id,incorrect_answers:item.incorrect_answers,allAnswers:item.answers,handleAnswerSelector:answerSelector,gameCompleted:gameCompleted},nanoid());});function checkanswer(){// set game completed state to true\nsetgameCompleted(true);var countAnswer=[];// map through quiz state, filter answer in each and compare selected answer & correct answer\nreturn quizObj.map(function(data){var correctAnswerCount=data.answers.filter(function(each){return each.selected&&each.isCorrect;});//check if correct answer array is not empty before push\ncorrectAnswerCount[0]&&countAnswer.push(correctAnswerCount);setScore(countAnswer.length);console.log(correctAnswerCount);});}return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[allQuize,/*#__PURE__*/_jsxs(\"div\",{className:\"newgame--action\",children:[gameCompleted&&/*#__PURE__*/_jsxs(\"h4\",{children:[\"You scored \",score,\"/\",quizObj.length]}),!gameCompleted?/*#__PURE__*/_jsx(\"button\",{className:\"btn--check--answer\",onClick:checkanswer,children:\"Check answer\"}):/*#__PURE__*/_jsx(\"button\",{className:\"btn--check--answer\",children:\"Play again!\"})]})]});}export default App;","map":{"version":3,"names":["Quiz","React","nanoid","App","useState","quizObj","setQuizObj","gameCompleted","setgameCompleted","score","setScore","extendAnswerObj","answer","isCorrect","id","text","selected","dataRestructor","data","questionsObj","map","result","cans","correct_answer","ians","incorrect_answers","prevObj","qid","answers","sort","Math","random","useEffect","fetch","then","res","json","results","answerSelector","questionid","answerid","prevData","eachQuestion","allQuize","item","question","checkanswer","countAnswer","correctAnswerCount","filter","each","push","length","console","log"],"sources":["/Users/mac/Documents/Dev/React Class/quizical/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport Quiz from \"./components/Quiz\";\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n  const [quizObj, setQuizObj] = React.useState([]);\n  const [gameCompleted, setgameCompleted] = React.useState(false);\n  const [score, setScore] = React.useState(0);\n  //created a function to restructor the answer object\n  function extendAnswerObj(answer, isCorrect) {\n    return {\n      id: nanoid(),\n      text: answer,\n      selected: false,\n      isCorrect: isCorrect,\n    };\n  }\n  //restructurd data. merge both correct and incorrect answers\n  function dataRestructor(data) {\n    const questionsObj = data.map((result) => {\n      const cans = extendAnswerObj(result.correct_answer, true);\n      const ians = result.incorrect_answers.map((prevObj) =>\n        extendAnswerObj(prevObj, false)\n      );\n      return {\n        ...result,\n        qid: nanoid(),\n        correct_answer: cans,\n        incorrect_answers: ians,\n        //combined and randomise both corect and incorrect answers\n        answers: [cans, ...ians].sort(() => 0.5 - Math.random()),\n      };\n    });\n    return questionsObj;\n  }\n\n  //check if game is not on first before getting new data from API\n  React.useEffect(() => {\n    !gameCompleted &&\n      fetch(\"https://opentdb.com/api.php?amount=3&category=18&difficulty=easy\")\n        .then((res) => res.json())\n        .then((data) => setQuizObj(dataRestructor(data.results)));\n  }, []);\n\n  //update the setQuizObj state when an answer is selected\n  function answerSelector(questionid, answerid) {\n    setQuizObj((prevData) =>\n      prevData.map((eachQuestion) => {\n        if (eachQuestion.qid === questionid) {\n          //check the question answered\n          return {\n            ...eachQuestion,\n            answers: eachQuestion.answers.map((answer) => {\n              //match update the seleted answer status\n              return answer.id === answerid\n                ? {\n                    ...answer,\n                    selected: true,\n                  }\n                : //return other answer and set their staus to not selected\n                  { ...answer, selected: false };\n            }),\n          };\n        } else {\n          return { ...eachQuestion };\n        }\n      })\n    );\n  }\n\n  //map through quiz state and returned redered quiz component\n  const allQuize = quizObj.map((item) => {\n    return (\n      <Quiz\n        key={nanoid()}\n        id={item.qid}\n        question={item.question}\n        correct_answer={item.correct_answer.id}\n        incorrect_answers={item.incorrect_answers}\n        allAnswers={item.answers}\n        handleAnswerSelector={answerSelector}\n        gameCompleted={gameCompleted}\n      />\n    );\n  });\n\n  function checkanswer() {\n    // set game completed state to true\n    setgameCompleted(true);\n    const countAnswer = [];\n    // map through quiz state, filter answer in each and compare selected answer & correct answer\n    return quizObj.map((data) => {\n      let correctAnswerCount = data.answers.filter(\n        (each) => each.selected && each.isCorrect\n      );\n      //check if correct answer array is not empty before push\n      correctAnswerCount[0] && countAnswer.push(correctAnswerCount);\n\n      setScore(countAnswer.length);\n      console.log(correctAnswerCount);\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      {/* //all quiz component */}\n      {allQuize}\n      <div className=\"newgame--action\">\n        {gameCompleted && (\n          <h4>\n            You scored {score}/{quizObj.length}\n          </h4>\n        )}\n        {/* conditionally render check answer and paly again button */}\n        {!gameCompleted ? (\n          <button className=\"btn--check--answer\" onClick={checkanswer}>\n            Check answer\n          </button>\n        ) : (\n          <button className=\"btn--check--answer\">Play again!</button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"gZAAA,MAAO,WAAP,CACA,MAAOA,KAAP,KAAiB,mBAAjB,CACA,MAAOC,MAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,KAAuB,QAAvB,C,wFAEA,QAASC,IAAT,EAAe,CACb,oBAA8BF,KAAK,CAACG,QAAN,CAAe,EAAf,CAA9B,oDAAOC,OAAP,qBAAgBC,UAAhB,qBACA,qBAA0CL,KAAK,CAACG,QAAN,CAAe,KAAf,CAA1C,qDAAOG,aAAP,qBAAsBC,gBAAtB,qBACA,qBAA0BP,KAAK,CAACG,QAAN,CAAe,CAAf,CAA1B,qDAAOK,KAAP,qBAAcC,QAAd,qBACA;AACA,QAASC,gBAAT,CAAyBC,MAAzB,CAAiCC,SAAjC,CAA4C,CAC1C,MAAO,CACLC,EAAE,CAAEZ,MAAM,EADL,CAELa,IAAI,CAAEH,MAFD,CAGLI,QAAQ,CAAE,KAHL,CAILH,SAAS,CAAEA,SAJN,CAAP,CAMD,CACD;AACA,QAASI,eAAT,CAAwBC,IAAxB,CAA8B,CAC5B,GAAMC,aAAY,CAAGD,IAAI,CAACE,GAAL,CAAS,SAACC,MAAD,CAAY,CACxC,GAAMC,KAAI,CAAGX,eAAe,CAACU,MAAM,CAACE,cAAR,CAAwB,IAAxB,CAA5B,CACA,GAAMC,KAAI,CAAGH,MAAM,CAACI,iBAAP,CAAyBL,GAAzB,CAA6B,SAACM,OAAD,QACxCf,gBAAe,CAACe,OAAD,CAAU,KAAV,CADyB,EAA7B,CAAb,CAGA,sCACKL,MADL,MAEEM,GAAG,CAAEzB,MAAM,EAFb,CAGEqB,cAAc,CAAED,IAHlB,CAIEG,iBAAiB,CAAED,IAJrB,CAKE;AACAI,OAAO,CAAE,CAACN,IAAD,4BAAUE,IAAV,GAAgBK,IAAhB,CAAqB,iBAAM,KAAMC,IAAI,CAACC,MAAL,EAAZ,EAArB,CANX,GAQD,CAboB,CAArB,CAcA,MAAOZ,aAAP,CACD,CAED;AACAlB,KAAK,CAAC+B,SAAN,CAAgB,UAAM,CACpB,CAACzB,aAAD,EACE0B,KAAK,CAAC,kEAAD,CAAL,CACGC,IADH,CACQ,SAACC,GAAD,QAASA,IAAG,CAACC,IAAJ,EAAT,EADR,EAEGF,IAFH,CAEQ,SAAChB,IAAD,QAAUZ,WAAU,CAACW,cAAc,CAACC,IAAI,CAACmB,OAAN,CAAf,CAApB,EAFR,CADF,CAID,CALD,CAKG,EALH,EAOA;AACA,QAASC,eAAT,CAAwBC,UAAxB,CAAoCC,QAApC,CAA8C,CAC5ClC,UAAU,CAAC,SAACmC,QAAD,QACTA,SAAQ,CAACrB,GAAT,CAAa,SAACsB,YAAD,CAAkB,CAC7B,GAAIA,YAAY,CAACf,GAAb,GAAqBY,UAAzB,CAAqC,CACnC;AACA,sCACKG,YADL,MAEEd,OAAO,CAAEc,YAAY,CAACd,OAAb,CAAqBR,GAArB,CAAyB,SAACR,MAAD,CAAY,CAC5C;AACA,MAAOA,OAAM,CAACE,EAAP,GAAc0B,QAAd,gCAEE5B,MAFF,MAGDI,QAAQ,CAAE,IAHT,GAKH;AALG,+BAMEJ,MANF,MAMUI,QAAQ,CAAE,KANpB,EAAP,CAOD,CATQ,CAFX,GAaD,CAfD,IAeO,CACL,wBAAY0B,YAAZ,EACD,CACF,CAnBD,CADS,EAAD,CAAV,CAsBD,CAED;AACA,GAAMC,SAAQ,CAAGtC,OAAO,CAACe,GAAR,CAAY,SAACwB,IAAD,CAAU,CACrC,mBACE,KAAC,IAAD,EAEE,EAAE,CAAEA,IAAI,CAACjB,GAFX,CAGE,QAAQ,CAAEiB,IAAI,CAACC,QAHjB,CAIE,cAAc,CAAED,IAAI,CAACrB,cAAL,CAAoBT,EAJtC,CAKE,iBAAiB,CAAE8B,IAAI,CAACnB,iBAL1B,CAME,UAAU,CAAEmB,IAAI,CAAChB,OANnB,CAOE,oBAAoB,CAAEU,cAPxB,CAQE,aAAa,CAAE/B,aARjB,EACOL,MAAM,EADb,CADF,CAYD,CAbgB,CAAjB,CAeA,QAAS4C,YAAT,EAAuB,CACrB;AACAtC,gBAAgB,CAAC,IAAD,CAAhB,CACA,GAAMuC,YAAW,CAAG,EAApB,CACA;AACA,MAAO1C,QAAO,CAACe,GAAR,CAAY,SAACF,IAAD,CAAU,CAC3B,GAAI8B,mBAAkB,CAAG9B,IAAI,CAACU,OAAL,CAAaqB,MAAb,CACvB,SAACC,IAAD,QAAUA,KAAI,CAAClC,QAAL,EAAiBkC,IAAI,CAACrC,SAAhC,EADuB,CAAzB,CAGA;AACAmC,kBAAkB,CAAC,CAAD,CAAlB,EAAyBD,WAAW,CAACI,IAAZ,CAAiBH,kBAAjB,CAAzB,CAEAtC,QAAQ,CAACqC,WAAW,CAACK,MAAb,CAAR,CACAC,OAAO,CAACC,GAAR,CAAYN,kBAAZ,EACD,CATM,CAAP,CAUD,CAED,mBACE,aAAK,SAAS,CAAC,WAAf,WAEGL,QAFH,cAGE,aAAK,SAAS,CAAC,iBAAf,WACGpC,aAAa,eACZ,oCACcE,KADd,KACsBJ,OAAO,CAAC+C,MAD9B,GAFJ,CAOG,CAAC7C,aAAD,cACC,eAAQ,SAAS,CAAC,oBAAlB,CAAuC,OAAO,CAAEuC,WAAhD,0BADD,cAKC,eAAQ,SAAS,CAAC,oBAAlB,yBAZJ,GAHF,GADF,CAqBD,CAED,cAAe3C,IAAf"},"metadata":{},"sourceType":"module"}