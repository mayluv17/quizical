[{"/Users/mac/Documents/Dev/React Class/quizical/src/index.js":"1","/Users/mac/Documents/Dev/React Class/quizical/src/App.js":"2","/Users/mac/Documents/Dev/React Class/quizical/src/reportWebVitals.js":"3","/Users/mac/Documents/Dev/React Class/quizical/src/components/Quiz.js":"4"},{"size":535,"mtime":1660333622905,"results":"5","hashOfConfig":"6"},{"size":4074,"mtime":1669291353201,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1660333622907,"results":"8","hashOfConfig":"6"},{"size":1193,"mtime":1660640847653,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1ka51rp",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"/Users/mac/Documents/Dev/React Class/quizical/src/index.js",[],[],[],"/Users/mac/Documents/Dev/React Class/quizical/src/App.js",["24","25"],[],"import \"./App.css\";\nimport Quiz from \"./components/Quiz\";\nimport React from \"react\";\nimport { nanoid } from \"nanoid\";\n\nfunction App() {\n  const [quizObj, setQuizObj] = React.useState([]);\n  const [gameCompleted, setgameCompleted] = React.useState(false);\n  const [score, setScore] = React.useState(0);\n\n  function resetGame() {\n    setQuizObj([]);\n    setgameCompleted(false);\n    setScore(0);\n  }\n  //created a function to restructor the answer object\n  function extendAnswerObj(answer, isCorrect) {\n    return {\n      id: nanoid(),\n      text: answer,\n      selected: false,\n      isCorrect: isCorrect,\n    };\n  }\n  //restructurd data. merge both correct and incorrect answers\n  function dataRestructor(data) {\n    const questionsObj = data.map((result) => {\n      const cans = extendAnswerObj(result.correct_answer, true);\n      const ians = result.incorrect_answers.map((prevObj) =>\n        extendAnswerObj(prevObj, false)\n      );\n      return {\n        ...result,\n        qid: nanoid(),\n        correct_answer: cans,\n        incorrect_answers: ians,\n        //combined and randomise both corect and incorrect answers\n        answers: [cans, ...ians].sort(() => 0.5 - Math.random()),\n      };\n    });\n    return questionsObj;\n  }\n\n  //check if game is not on first before getting new data from API\n  React.useEffect(() => {\n    !gameCompleted &&\n      fetch(\"https://opentdb.com/api.php?amount=6&category=18&difficulty=easy\")\n        .then((res) => res.json())\n        .then((data) => setQuizObj(dataRestructor(data.results)));\n  }, [gameCompleted]);\n\n  //update the setQuizObj state when an answer is selected\n  function answerSelector(questionid, answerid) {\n    setQuizObj((prevData) =>\n      prevData.map((eachQuestion) => {\n        if (eachQuestion.qid === questionid) {\n          //check the question answered\n          return {\n            ...eachQuestion,\n            answers: eachQuestion.answers.map((answer) => {\n              //match update the seleted answer status\n              return answer.id === answerid\n                ? {\n                    ...answer,\n                    selected: true,\n                  }\n                : //return other answer and set their staus to not selected\n                  { ...answer, selected: false };\n            }),\n          };\n        } else {\n          return { ...eachQuestion };\n        }\n      })\n    );\n  }\n\n  //map through quiz state and returned redered quiz component\n  const allQuize = quizObj.map((item) => {\n    return (\n      <Quiz\n        key={nanoid()}\n        id={item.qid}\n        question={item.question}\n        correct_answer={item.correct_answer.id}\n        incorrect_answers={item.incorrect_answers}\n        allAnswers={item.answers}\n        handleAnswerSelector={answerSelector}\n        gameCompleted={gameCompleted}\n      />\n    );\n  });\n\n  function checkanswer() {\n    // set game completed state to true\n    setgameCompleted(true);\n    const countAnswer = [];\n    // map through quiz state, filter answer in each and compare selected answer & correct answer\n    return quizObj.map((data) => {\n      let correctAnswerCount = data.answers.filter(\n        (each) => each.selected && each.isCorrect\n      );\n      //check if correct answer array is not empty before push\n      correctAnswerCount[0] && countAnswer.push(correctAnswerCount);\n\n      setScore(countAnswer.length);\n      console.log(correctAnswerCount);\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      {/* //all quiz component */}\n      {allQuize}\n      <div className=\"newgame--action\">\n        {gameCompleted && (\n          <h4>\n            You scored {score}/{quizObj.length}\n          </h4>\n        )}\n        {/* conditionally render check answer and paly again button */}\n        {!gameCompleted ? (\n          <button className=\"btn--check--answer\" onClick={checkanswer}>\n            Check answer\n          </button>\n        ) : (\n          <button onClick={resetGame} className=\"btn--check--answer\">\n            Play again!\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mac/Documents/Dev/React Class/quizical/src/reportWebVitals.js",[],[],"/Users/mac/Documents/Dev/React Class/quizical/src/components/Quiz.js",[],[],{"ruleId":"26","severity":1,"message":"27","line":50,"column":6,"nodeType":"28","endLine":50,"endColumn":21,"suggestions":"29"},{"ruleId":"30","severity":1,"message":"31","line":99,"column":31,"nodeType":"32","messageId":"33","endLine":99,"endColumn":33},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dataRestructor'. Either include it or remove the dependency array.","ArrayExpression",["34"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",{"desc":"35","fix":"36"},"Update the dependencies array to be: [dataRestructor, gameCompleted]",{"range":"37","text":"38"},[1538,1553],"[dataRestructor, gameCompleted]"]